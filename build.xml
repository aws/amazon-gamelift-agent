<?xml version="1.0"?>

<project name="GameLiftAgent-1.0" basedir="." default="release" xmlns:ht="happytrails">
  <import file="${happytrails.root}/happytrails.xml"/>

  <!-- Checkstyle and findbugs concerns will need to be addressed eventually, but enforcement has been
     disabled while performing the initial setup. -->
  <property name="checkstyle.configuration.file"
            value="${bp:[GameScaleCheckstyle]pkg.configfarm.checkstyle}/checkstyle/checkstyle-rules.xml" />
  <property name="checkstyle.suppression.filter"
            location="${basedir}/configuration/checkstyle/checkstyle-suppression.xml" />
  <property name="checkstyle.failOnError" value="true"/>
  <property name="ht.checkstyle.always.report" value="true"/>
  <property name="findbugs.failOnError" value="false"/>
  <property name="ht.findbugs.always.report" value="true"/>

  <!-- Define HappierTrails property overrides here -->
  <property name="ht.include.cfg" value="true"/>
  <property name="tests.additional.jvmargs" value=""/>
  <property name="tests.additional.runtime.classpath" value="${basedir}/tst/resources"/>

  <ht:import file="happier-trails.xml"/>
  <ht:import file="dagger/happier-trails.xml"/>
  <ht:import file="lombok/happier-trails.xml" optional="false" />

  <property name="dependencies.dir"
            value="${output.dir}/brazil-dependencies"
            description="Directory in which Brazil dependencies are kept" />

  <property name="jar.dir"
            value="${output.dir}/"
            description="Directory in which the standalone jar will be put" />

  <!-- For the JAR name, remove any periods from the major version and replace them with underscores -->
  <propertyregex property="jar.name.package-major-version"
                 input="${bp:package-major-version}"
                 regexp="\."
                 replace="_" />

  <!--
    Using the project name will replace the default jar generated by the release target.
    This is desirable but currently causes issues with the standard-jdeps build step,
    so we are using a placeholder name for now. NOTE: Until we update the CDK package to
    reference the placeholder name, the executable jar will not be uploaded to the correct
    S3 bucket.
  -->
  <property name="jar.name"
            value="GameLiftAgent-standalone-${jar.name.package-major-version}.jar"
            description="Name of the standalone jar" />

  <target name="copy-dependencies"
          depends="compile-jar"
          description="Copies all Brazil dependencies into a single folder">
    <delete dir="${dependencies.dir}"/>
    <mkdir dir="${dependencies.dir}" />
    <copy todir="${dependencies.dir}" flatten="true" failonerror="true">
      <path path="${bp:run.classpath}" />
    </copy>
  </target>

  <target name="jar" extensionOf="ht-post-build" depends="copy-dependencies" description="Builds a standalone jar">
    <condition property="BRAZIL_PACKAGE_CHANGE_ID" value="${env.BRAZIL_PACKAGE_CHANGE_ID}" else="unknown">
      <isset property="env.BRAZIL_PACKAGE_CHANGE_ID" />
    </condition>
    <jar destfile="${jar.dir}/${jar.name}">
      <zipgroupfileset dir="${dependencies.dir}" />
      <manifest>
        <attribute name="Main-Class" value="com.amazon.gamelift.agent.Application" />
        <attribute name="commit_id" value="${BRAZIL_PACKAGE_CHANGE_ID}" />
      </manifest>
    </jar>
  </target>

  <target name="run" description="Executes the standalone jar with manual inputs for parameters">
    <property name="runtime_config_opt" value="-rc"/>
    <input message="Serialized Runtime Configuration: " addproperty="runtime_config"/>
    <property name="fleet_id_opt" value="-f"/>
    <input message="Fleet ID: " addproperty="fleet_id"/>
    <property name="compute_name_opt" value="-c"/>
    <input message="Compute Name: " addproperty="compute_name"/>
    <input message="Region: " addproperty="region"/>
    <property name="region_opt" value="-r"/>
    <input message="Initial Auth GameLiftAgent Websocket Endpoint: " addproperty="auth_ga_websocket_endpoint"/>
    <property name="auth_ga_websocket_endpoint_opt" value="authe"/>
    <input message="GameLift Agent Websocket Endpoint: " addproperty="ga_websocket_endpoint"/>
    <property name="ga_websocket_endpoint_opt" value="-gae"/>
    <input message="GameLift Endpoint Override: " addproperty="gamelift_endpoint_override"/>
    <property name="gamelift_endpoint_override_opt" value="-gleo"/>
    <input message="Certificate Path: " addproperty="certificate_path"/>
    <property name="certificate_path_opt" value="-cp"/>
    <input message="IP Address: " addproperty="ip_address"/>
    <property name="ip_address_opt" value="-i"/>
    <input message="DNS Name: " addproperty="dns_name"/>
    <property name="dns_name_opt" value="-d"/>
    <java jar="${jar.dir}/${jar.name}" fork="true">
      <sysproperty key="gamelift.agent.disableFileLogging" value="true"/>
      <arg value="${runtime_config_opt}"/>
      <arg value="${runtime_config}"/>
      <arg value="${fleet_id_opt}"/>
      <arg value="${fleet_id}"/>
      <arg value="${compute_name_opt}"/>
      <arg value="${compute_name}"/>
      <arg value="${region_opt}"/>
      <arg value="${region}"/>
      <arg value="${auth_ga_websocket_endpoint_opt}"/>
      <arg value="${auth_ga_websocket_endpoint}"/>
      <arg value="${ga_websocket_endpoint_opt}"/>
      <arg value="${ga_websocket_endpoint}"/>
      <arg value="${gamelift_endpoint_override_opt}"/>
      <arg value="${gamelift_endpoint_override}"/>
      <arg value="${certificate_path_opt}"/>
      <arg value="${certificate_path}"/>
      <arg value="${ip_address_opt}"/>
      <arg value="${ip_address}"/>
      <arg value="${dns_name_opt}"/>
      <arg value="${dns_name}"/>
    </java>
  </target>
  <!-- Requires 'ada' to be installed. Use 'toolbox install ada'.
       Also must be ran on a Linux based system to have access to the commands 'uuidgen' and 'hostname'.
       It also assumes the fleet "5aeb0d29-4013-4eb9-acd5-ce096852b885" exists in alpha,
       and has computeType = EC2. If this fleet gets deleted for some reason, we'll need to create a new one:
       1. Go to the fleets service alpha account 242220132673
       2. Execute the "CreateFleet" lambda, use:
          - Headers: '"contentType":"application/x-amz-json-1.1"'
          - Body: {"Name":"GameLiftAgentSampleTestFleet-DoNotDelete","ComputeType":"ANYWHERE","AwsAccountId":"370734919210"}
       3. Go to the WW service alpha account 985706097632
       4. Edit the DDB fleet record, and set "ComputeType" to "EC2"

       TODO GLIFT-17265: Automate creating a new fleet every GameLiftAgent test run
  -->
  <target name="run-test" description="Executes the standalone jar for a sample alpha fleet">
    <exec executable="/bin/sh">
      <arg value="-c"/>
      <arg value="if id -ur gl-user-server &amp;>/dev/null; then
                      echo 'User found - Skip adding a user process';
                  elif getent group gl-user-server &amp;>/dev/null; then
                      echo 'Group found - creating and adding user';
                      sudo useradd -g gl-user-server gl-user-server
                      echo 'User is added into the system';
                  else
                      echo 'User not found';
                      sudo useradd gl-user-server;
                      echo 'User is added into the system';
                  fi"/>
    </exec>
    <exec executable="uuidgen" outputproperty="computeName"/>
    <exec executable="hostname" outputproperty="computer.hostname"/>
    <exec executable="ada">
      <arg value="credentials"/>
      <arg value="update"/>
      <arg value="--once"/>
      <arg value="--role"/>
      <arg value="FullAccess"/>
      <arg value="--account"/>
      <arg value="370734919210"/>
    </exec>
    <property name="runtime_config_opt" value="-rc"/>
    <property name="runtime_config" value=
            "{
              &quot;ServerProcesses&quot;: [
                {
                  &quot;ConcurrentExecutions&quot;: &quot;3&quot;,
                  &quot;LaunchPath&quot;: &quot;sleep&quot;,
                  &quot;Parameters&quot;: &quot;5&quot;
                }
              ]
            }"/>
    <property name="fleet_id_opt" value="-f"/>
    <property name="fleet_id" value="fleet-5aeb0d29-4013-4eb9-acd5-ce096852b885"/>
    <property name="test_configuration_opt" value="-tc"/>
    <property name="test_configuration" value="{&quot;TestMode&quot;:&quot;SKIP_REGISTRATION&quot;,&quot;MockComputeAuthToken&quot;:&quot;ADD MOCK COMPUTE AUTH TOKEN TO USE HERE1&quot;,&quot;MockSdkEndpoint&quot;:&quot;ADD MOCK SDK ENDPOINT TO USE HERE1&quot;}"/>
    <property name="compute_name_opt" value="-c"/>
    <property name="compute_name" value="${user.name}-dev-desktop-${computeName}"/>
    <property name="region_opt" value="-r"/>
    <property name="region" value="us-west-2"/>
    <property name="auth_ga_websocket_endpoint_opt" value="-authe"/>
    <property name="auth_ga_websocket_endpoint" value="wss://ilj21qncxj.execute-api.us-west-2.amazonaws.com/alpha"/>
    <property name="ga_websocket_endpoint_opt" value="-gae"/>
    <property name="ga_websocket_endpoint" value="wss://izvlih2xd6.execute-api.us-west-2.amazonaws.com/alpha"/>
    <property name="gamelift_endpoint_override_opt" value="-gleo"/>
    <property name="gamelift_endpoint_override" value="https://gamelift-alpha.us-west-2.amazonaws.com"/>
    <property name="dns_name_opt" value="-d"/>
    <property name="dns_name" value="${computer.hostname}"/>
    <java jar="${jar.dir}/${jar.name}" fork="true">
      <sysproperty key="gamelift.agent.disableFileLogging" value="true"/>
      <arg value="${runtime_config_opt}"/>
      <arg value="${runtime_config}"/>
      <arg value="${fleet_id_opt}"/>
      <arg value="${fleet_id}"/>
      <arg value="${test_configuration_opt}"/>
      <arg value="${test_configuration}"/>
      <arg value="${compute_name_opt}"/>
      <arg value="${compute_name}"/>
      <arg value="${region_opt}"/>
      <arg value="${region}"/>
      <arg value="${auth_ga_websocket_endpoint_opt}"/>
      <arg value="${auth_ga_websocket_endpoint}"/>
      <arg value="${ga_websocket_endpoint_opt}"/>
      <arg value="${ga_websocket_endpoint}"/>
      <arg value="${gamelift_endpoint_override_opt}"/>
      <arg value="${gamelift_endpoint_override}"/>
      <arg value="${dns_name_opt}"/>
      <arg value="${dns_name}"/>
    </java>
  </target>

  <!-- Note: See comment before `run-test` command - all pre-requisites there apply here as well.
       This test will launch real processes via the GameLift C# SDK TestApplicationServer
       1. Get a copy of a SDK 5.0+ SDK Test app from GameScaleServerSdkCSharp package
       2. Place the zip in "/local/game/" and unzip it there
       3. Modify the `TestApplicationServer` script to set monoCommand="mono /local/game/TestApplicationServer.exe"
       4. Set permissions for the 'TestApplicationServer' script with 'chmod 755 TestApplicationServer'
       Modify the runtime configuration below as desired for your launch preferences
       TODO GLIFT-17265: Automate creating a new fleet every GameLiftAgent test run
  -->
  <target name="run-test-sdk-testapp" description="Executes the standalone jar for a sample alpha fleet">
    <exec executable="/bin/sh">
      <arg value="-c"/>
      <arg value="if id -ur gl-user-server &amp;>/dev/null; then
                      echo 'User found - Skip adding a user process';
                  elif getent group gl-user-server &amp;>/dev/null; then
                      echo 'Group found - creating and adding user';
                      sudo useradd -g gl-user-server gl-user-server
                      echo 'User is added into the system';
                  else
                      echo 'User not found';
                      sudo useradd gl-user-server;
                      echo 'User is added into the system';
                  fi"/>
    </exec>
    <exec executable="uuidgen" outputproperty="computeName"/>
    <exec executable="hostname" outputproperty="computer.hostname"/>
    <exec executable="ada">
      <arg value="credentials"/>
      <arg value="update"/>
      <arg value="--once"/>
      <arg value="--role"/>
      <arg value="FullAccess"/>
      <arg value="--account"/>
      <arg value="370734919210"/>
    </exec>
    <property name="runtime_config_opt" value="-rc"/>
    <property name="runtime_config" value=
            "{
              &quot;ServerProcesses&quot;: [
                {
                  &quot;ConcurrentExecutions&quot;: &quot;20&quot;,
                  &quot;LaunchPath&quot;: &quot;/local/game/TestApplicationServer&quot;,
                  &quot;Parameters&quot;: &quot;-f fleet-5aeb0d29-4013-4eb9-acd5-ce096852b885 -i ${user.name}-dev-desktop-${computeName} -w wss://n1myab2jn9.execute-api.us-west-2.amazonaws.com/alpha -l 60000 -t 300000&quot;
                }
              ]
            }"/>
    <property name="fleet_id_opt" value="-f"/>
    <property name="fleet_id" value="fleet-5aeb0d29-4013-4eb9-acd5-ce096852b885"/>
    <property name="test_configuration_opt" value="-tc"/>
    <property name="test_configuration" value="{&quot;TestMode&quot;:&quot;SKIP_REGISTRATION&quot;,&quot;MockComputeAuthToken&quot;:&quot;ADD MOCK COMPUTE AUTH TOKEN TO USE HERE1&quot;,&quot;MockSdkEndpoint&quot;:&quot;ADD MOCK SDK ENDPOINT TO USE HERE1&quot;}"/>
    <property name="compute_name_opt" value="-c"/>
    <property name="compute_name" value="${user.name}-dev-desktop-${computeName}"/>
    <property name="region_opt" value="-r"/>
    <property name="region" value="us-west-2"/>
    <property name="auth_ga_websocket_endpoint_opt" value="-authe"/>
    <property name="auth_ga_websocket_endpoint" value="wss://ilj21qncxj.execute-api.us-west-2.amazonaws.com/alpha"/>
    <property name="ga_websocket_endpoint_opt" value="-gae"/>
    <property name="ga_websocket_endpoint" value="wss://izvlih2xd6.execute-api.us-west-2.amazonaws.com/alpha"/>
    <property name="gamelift_endpoint_override_opt" value="-gleo"/>
    <property name="gamelift_endpoint_override" value="https://gamelift-alpha.us-west-2.amazonaws.com"/>
    <property name="dns_name_opt" value="-d"/>
    <property name="dns_name" value="${computer.hostname}"/>
    <java jar="${jar.dir}/${jar.name}" fork="true">
      <sysproperty key="gamelift.agent.disableFileLogging" value="true"/>
      <arg value="${runtime_config_opt}"/>
      <arg value="${runtime_config}"/>
      <arg value="${fleet_id_opt}"/>
      <arg value="${fleet_id}"/>
      <arg value="${test_configuration_opt}"/>
      <arg value="${test_configuration}"/>
      <arg value="${compute_name_opt}"/>
      <arg value="${compute_name}"/>
      <arg value="${region_opt}"/>
      <arg value="${region}"/>
      <arg value="${auth_ga_websocket_endpoint_opt}"/>
      <arg value="${auth_ga_websocket_endpoint}"/>
      <arg value="${ga_websocket_endpoint_opt}"/>
      <arg value="${ga_websocket_endpoint}"/>
      <arg value="${gamelift_endpoint_override_opt}"/>
      <arg value="${gamelift_endpoint_override}"/>
      <arg value="${dns_name_opt}"/>
      <arg value="${dns_name}"/>
    </java>
  </target>

  <target name="clean-run-artifacts" extensionOf="ht-post-clean" description="Removes artifacts created after executing the run command">
    <delete dir="logs" />
  </target>
</project>
